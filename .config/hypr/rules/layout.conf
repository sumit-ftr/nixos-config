dwindle {
  pseudotile = false # enable pseudotiling. Pseudotiled windows retain their floating size when tiled.
  force_split = 0 # 0 -> split follows mouse, 1 -> always split to the left (new = left or top) 2 -> always split to the right (new = int	0 # right or bottom)
  preserve_split = false # if enabled, the split (side/top) will not change regardless of what happens to the container.
  smart_split = false # if enabled, allows a more precise control over the window split direction based on the cursor’s position. The window is conceptually divided into four triangles, and cursor’s triangle determines the split direction. This feature also turns on preserve_split
  smart_resizing = true # if enabled, resizing direction will be determined by the mouse’s position on the window (nearest to which corner). Else, it is based on the window’s tiling position
  permanent_direction_override = false # if enabled, makes the preselect direction persist until either this mode is turned off, another direction is specified, or a non-direction is specified (anything other than l,r,u/t,d/b)
  special_scale_factor = 1 # specifies the scale factor of windows on the special workspace [0 - 1]
  split_width_multiplier = 1.0 # specifies the auto-split width multiplier
  use_active_for_splits = true # whether to prefer the active window or the mouse position for splits
  default_split_ratio = 1.0 # the default split ratio on window open. 1 means even 50/50 split. [0.1 - 1.9]
  split_bias = 0 # specifies which window will receive the larger half of a split. positional - 0, current window - 1, opening window - 2 [0/1/2]
}

master {
  allow_small_split = false # enable adding additional master windows in a horizontal split style
  special_scale_factor = 1 # the scale of the special workspace windows. [0.0 - 1.0]
  mfact = 0.55 # the size as a percentage of the master window, for example mfact = 0.70 would mean 70% of the screen will be the master window, and 30% the slave [0.0 - 1.0]
  new_status = slave # master: new window becomes master; slave: new windows are added to slave stack; inherit: inherit from focused window
  new_on_top = false # whether a newly open window should be on the top of the stack
  new_on_active = none # before, after: place new window relative to the focused window; none: place new window according to the value of new_on_top.
  orientation = left # default placement of the master area, can be left, right, top, bottom or center
  inherit_fullscreen = true # inherit fullscreen status when cycling/swapping to another window (e.g. monocle layout)
  slave_count_for_center_master = 2 # when using orientation=cint enter, make the master window centered only when at least this many slave windows are open. (Set 0 to always_center_master)	
  center_master_slaves_on_right = true # set if the slaves should appear on right of master when slave_count_for_center_master > 2
  smart_resizing = true # if enabled, resizing direction will be determined by the mouse’s position on the window (nearest to which corner). Else, it is based on the window’s tiling position.
  drop_at_cursor = true # when enabled, dragging and dropping windows will put them at the cursor position. Otherwise, when dropped at the stack side, they will go to the top/bottom of the stack depending on new_on_top.
  always_keep_position = false	 # whether to keep the master window in its configured position when there are no slave windows
}
